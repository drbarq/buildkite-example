steps:
  - label: ":docker: Login and Run Command"
    plugins:
      - docker-login#v2.0.1:
          username: ${DOCKER_USERNAME}
          password-env: DOCKER_LOGIN_PASSWORD
    command: |
      echo "Docker login successful!"
      # Add your Docker commands here, for example:
      # docker pull your-image:tag
      # docker run your-image:tag
    agents:
      location: "local"

  - wait: ~

  - label: "Verify :docker: Login"
    command: |
      echo "Verifying Docker login..."
      docker info
      docker system info --format '{{.RegistryConfig.IndexConfigs}}'
    agents:
      location: "local"

  - label: ":docker: Build"
    command: |
      docker-compose build app
      docker images
    agents:
      location: "local"

  - label: ":arrow_up: Upload Artifact"
    command:
      - ls -la hello_dir
      - "cd hello_dir && go build -o hello_binary"
      - "buildkite-agent artifact upload hello_binary"
    agents:
      location: "local"

  - label: ":clipboard: Print Build Number"
    command: |
      echo "Build Number: $BUILDKITE_BUILD_NUMBER"
      echo "Pipeline: $BUILDKITE_PIPELINE_SLUG"
    agents:
      location: "local"

  - wait

  - block: "Pause before entering name"
    prompt: "Please enter your name in the following input step."

  - input: "Enter your name"
    fields:
      - text: "Your name"
        key: "NAME"
        required: true

  - label: "Run :purescript:"
    command: script.sh
    agents:
      location: "local"

  - label: "Debug NAME variable"
    command: |
      echo "All meta-data keys:"
      buildkite-agent meta-data keys
      echo "NAME from meta-data: $(buildkite-agent meta-data get NAME)"
    agents:
      location: "local"

  - label: ":runner: Hello Binary with :buildkite: Name"
    command: |
      buildkite-agent artifact download hello_binary .
      # ls -la
      chmod +x hello_binary
      ./hello_binary $(buildkite-agent meta-data get NAME)
    agents:
      location: "local"

  - wait: ~

  - label: ":cloud: Download Artifact and Deploy on EC2"
    command: |
      echo "Running on the remote EC2 instance"

      echo buildkiteName: $(buildkite-agent meta-data get NAME)

      # cd ec2_app

      pwd
      # Download the artifact
      buildkite-agent artifact download hello_binary . --build "$BUILDKITE_BUILD_NUMBER" --pipeline "$BUILDKITE_PIPELINE_SLUG"

      # ls -la $(pwd)/hello_dir

      sudo chmod u+w $(pwd)

      # Compile the Go program for the current architecture
      GOOS=linux GOARCH=amd64 go build -o $(pwd)/hello_dir/hello_binary $(pwd)/hello_dir/hello.go

      # Ensure the binary is executable
      # echo "$(pwd)/hello_dir/hello_binary"
      chmod +x $(pwd)/hello_dir/hello_binary
      # hello_binary


      # Run the binary
      $(pwd)/hello_dir/hello_binary "$(buildkite-agent meta-data get NAME)"
      # $(pwd)/hello_dir/hello_binary "Joe"

      # (Optional) Other deployment commands here
      echo "Deployment finished!"
    agents:
      location: "remote"

  - label: ":white_check_mark: Deployment Complete"
    command: echo "Deployment successful!"
# # old config
# steps:
#   - block: "Pause before entering name"
#     prompt: "Please enter your name in the following input step."

#   - input: "Enter your name"
#     fields:
#       - text: "Your name"
#         key: "NAME"
#         required: true

#   - label: "Run Script"
#     command: script.sh

#   - wait: ~

#   - label: "Debug NAME variable"
#     command: |
#       echo "All meta-data keys:"
#       buildkite-agent meta-data keys
#       echo "NAME from meta-data: $(buildkite-agent meta-data get NAME)"

#   - label: ":docker: Build"
#     plugins:
#       - docker-compose#v5.3.0:
#           build: app

#   - wait

#   - label: "Debug and Run Hello Binary with Name"
#     command:
#       - docker-compose run --rm app $(buildkite-agent meta-data get NAME)
# How do use Docker Compose plugin?
# - label: "Run Hello Binary with Name"
#   plugins:
#     - docker-compose#v5.3.0:
#         run: app
#         command: [$(buildkite-agent meta-data get NAME)]

# echo "Docker password is set: $([[ -n "$(buildkite-agent meta-data get DOCKER_PASSWORD)" ]] && echo 'Yes' || echo 'No')"
# echo "All environment variables:"
# env | sort
# echo "Docker-related environment variables:"
# env | grep -i docker || echo "No Docker-related environment variables found"
# echo "Meta-data values:"
# buildkite-agent meta-data get DOCKER_USERNAME || echo "DOCKER_USERNAME not set in meta-data"
# [[ -n "$(buildkite-agent meta-data get DOCKER_PASSWORD)" ]] && echo "DOCKER_PASSWORD is set in meta-data" || echo "DOCKER_PASSWORD not set in meta-data"
# echo "Docker-related environment variables:"
# env | grep -i docker || echo "No Docker-related environment variables found"
