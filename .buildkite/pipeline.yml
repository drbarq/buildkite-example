# steps:
#   - label: "Verify Buildkite Directory Structure"
#     command:
#       - "ls -R"
#   - label: "Interactive Debugging"
#     plugins:
#       - docker#v5.11.0:
#           image: "golang:1.18.0"
#           workdir: "/app"
#           mount-checkout: false
#           volumes:
#             - "/opt/homebrew/var/buildkite-agent/builds/Joes-MBP-1/bredkrum/app-test-3:/app"
#           command: ["/bin/sh"]
# steps:
#   - label: "Verify Buildkite Directory Structure"
#     command:
#       - "ls -R"
#   - label: "Debug Directory Structure"
#     plugins:
#       - docker#v5.11.0:
#           image: "golang:1.18.0"
#           workdir: "/app"
#           mount-checkout: false
#           volumes:
#             - "/opt/homebrew/var/buildkite-agent/builds/Joes-MBP-1/bredkrum/app-test-3:/app"
#           command:
#             [
#               "sh",
#               "-c",
#               "echo 'Contents of /app:' && ls -R /app && echo 'Contents of /app/hello_dir:' && ls -R /app/hello_dir && echo 'hello.go file content:' && cat /app/hello_dir/hello.go",
#             ]
steps:
  - label: "Verify Buildkite Directory Structure"
    command:
      - "ls -R"

  # - label: "Install Docker Compose"
  #   command: |
  #     curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep -Po '"tag_name": "\K.*?(?=")')/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  #     chmod +x /usr/local/bin/docker-compose
  #     docker-compose --version

 - label: "Build Application with Docker Compose"
    plugins:
      - docker-compose#v3.0.3:
          build: app

  - label: "Run Application with Docker Compose"
    plugins:
      - docker-compose#v3.0.3:
          run: app
          command: >
            sh -c "
            ls -R /app &&
            cat /app/hello_dir/hello.go &&
            cd /app/hello_dir &&
            GO111MODULE=off go build -o ../hello_binary hello.go &&
            ../hello_binary 'Buildkite'"
    artifact_paths:
      - hello_binary

  - wait

  - label: "Run Hello Program"
    command: "./hello_binary Buildkite"
# steps:
#   - label: "Debug Directory Structure"
#     plugins:
#       - docker#v5.11.0:
#           image: "golang:1.18.0"
#           workdir: "/app"
#           volumes:
#             - ".:/app"
#           command:
#             [
#               "sh",
#               "-c",
#               "mkdir -p /app/hello && ls -R /app && ls -R /app/hello",
#             ]

#   - label: "Build Go Application"
#     plugins:
#       - docker#v5.11.0:
#           image: "golang:1.18.0"
#           workdir: "/app"
#           volumes:
#             - ".:/app"
#           command:
#             [
#               "sh",
#               "-c",
#               "[ -d hello ] && cd hello && go build -o hello hello.go && mv hello .. && cd .. && ./hello Buildkite || echo 'Directory hello not found'",
#             ]
#     artifact_paths:
#       - hello

#   - wait

#   - label: "Run Hello Program"
#     command: "./hello Buildkite"
#   - label: "Build Go Application"
#     plugins:
#       - docker#v3.7.0:
#           image: "golang:1.18.0"
#           workdir: "/app"
#           volumes:
#             - ".:/app"
#           command:
#             - go
#             - build
#             - -o
#             - hello
#             - ./hello.go
#     artifact_paths:
#       - "hello"

#   - block: "Enter your name"
#     prompt: "What's your name?"
#     fields:
#       - text: "name"
#         key: "user-name"
#         hint: "Enter your name"

#   - label: "Run Program"
#     commands:
#       - buildkite-agent artifact download hello .
#       - chmod +x ./hello
#       - ./hello "$(buildkite-agent meta-data get user-name)"
