steps:
  - label: ":docker: Login and Run Command"
    plugins:
      - docker-login#v2.0.1:
          username: ${DOCKER_USERNAME}
          password-env: DOCKER_LOGIN_PASSWORD
    command: |
      echo "Docker login successful!"
      # Add your Docker commands here, for example:
      # docker pull your-image:tag
      # docker run your-image:tag
    agents:
      location: "local"

  - wait: ~

  - label: "Verify :docker: Login"
    command: |
      echo "Verifying Docker login..."
      docker info
      docker system info --format '{{.RegistryConfig.IndexConfigs}}'
    agents:
      location: "local"

  - label: ":docker: Build"
    command: |
      docker-compose build app
      docker images
    agents:
      location: "local"

  - label: ":arrow_up: Upload Artifact"
    command:
      - ls -la hello_dir
      - "cd hello_dir && go build -o hello_binary"
      - "buildkite-agent artifact upload hello_binary"
    agents:
      location: "local"

  - label: ":clipboard: Print Build Number"
    command: |
      echo "Build Number: $BUILDKITE_BUILD_NUMBER"
      echo "Pipeline: $BUILDKITE_PIPELINE_SLUG"
    agents:
      location: "local"

  - wait

  - block: "Pause before entering name"
    prompt: "Please enter your name in the following input step."

  - input: "Enter your name"
    fields:
      - text: "Your name"
        key: "NAME"
        required: true

  - label: "Run :purescript:"
    command: script.sh
    agents:
      location: "local"

  - label: "Debug NAME variable"
    command: |
      echo "All meta-data keys:"
      buildkite-agent meta-data keys
      echo "NAME from meta-data: $(buildkite-agent meta-data get NAME)"
    agents:
      location: "local"

  - label: ":runner: Hello Binary with :buildkite: Name"
    command: |
      buildkite-agent artifact download hello_binary .
      # ls -la
      chmod +x hello_binary
      ./hello_binary $(buildkite-agent meta-data get NAME)
    agents:
      location: "local"

  - wait: ~

  - label: ":cloud: Download Artifact and Deploy on EC2"
    command: |
      echo "Running on the remote EC2 instance"
      
      # Download the artifact
      buildkite-agent artifact download hello_binary . --build "$BUILDKITE_BUILD_NUMBER" --pipeline "$BUILDKITE_PIPELINE_SLUG"
      
      # Ensure the binary is executable
      chmod +x hello_binary

      # Run the binary
      ./hello_binary

      # (Optional) Other deployment commands here
      echo "Deployment finished!"
    agents:
      location: "remote"  # Runs on your EC2 instance

  # - label: ":cloud: Deploy to EC2"
  #   command: |
  #     # echo "Deploying to EC2 instance..."
  #     echo "Deploying to EC2 instance..."
  #     # pwd
  #     # # ls -la ../
  #     # ls -la 
  #     ssh -o StrictHostKeyChecking=no -i ../buildkite.pem ec2-user@ec2-13-57-11-228.us-west-1.compute.amazonaws.com << 'EOF'
  #     # ssh -A ec2-user@ec2-13-57-11-228.us-west-1.compute.amazonaws.com << 'EOF'
  #       echo "Connected to EC2"


  #       # Update and install necessary packages

  #     # # Create a temporary directory for debugging
  #     # mkdir -p /tmp/artifacts-debug

  #     # # Download all artifacts to the temporary directory
  #     # buildkite-agent artifact download "*" /tmp/artifacts-debug

  #     # # List all downloaded artifacts to check what's available
  #     # echo "Artifacts available for this build:"
  #     # ls -la /tmp/artifacts-debug
  #     # ls -la /tmp/artifacts-debug
  #       sudo yum update -y

  #       # Install Docker
  #       sudo dnf install docker -y
  #       sudo systemctl start docker
  #       sudo systemctl enable docker
  #       sudo usermod -aG docker ec2-user

  #       # Install Docker Compose
  #       sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  #       sudo chmod +x /usr/local/bin/docker-compose
  #       sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

  #       # Navigate to your application's directory
  #       cd ec2_app
  #       # cd /var/lib/buildkite-agent/builds/ip-172-31-18-0-us-west-1-compute-internal-1/bredkrum/app-test-3/

  #       # Download the artifact from Buildkite
  #       buildkite-agent artifact download hello_binary . --build "$BUILDKITE_BUILD_NUMBER" --pipeline "$BUILDKITE_PIPELINE_SLUG"
  #       # buildkite-agent artifact download "*" .
  #       # buildkite-agent artifact download --help
  #       ls -la

  #       # Make the binary executable
  #       chmod +x hello_binary
  #       # Run the binary or continue with your deployment
  #       ./hello_binary

  #       # # Extract the artifact
  #       # tar -xzf hello_binary.tar.gz

  #       # # Build and start the containers/services
  #       # docker-compose up -d --build
  #       echo "Deployment finished!"
  #     EOF
  #   agents:
  #     location: "local"
  #   env:
  #     PEM_CONTENT: "$PEM_CONTENT"

  - label: ":white_check_mark: Deployment Complete"
    command: echo "Deployment successful!"
# # old config
# steps:
#   - block: "Pause before entering name"
#     prompt: "Please enter your name in the following input step."

#   - input: "Enter your name"
#     fields:
#       - text: "Your name"
#         key: "NAME"
#         required: true

#   - label: "Run Script"
#     command: script.sh

#   - wait: ~

#   - label: "Debug NAME variable"
#     command: |
#       echo "All meta-data keys:"
#       buildkite-agent meta-data keys
#       echo "NAME from meta-data: $(buildkite-agent meta-data get NAME)"

#   - label: ":docker: Build"
#     plugins:
#       - docker-compose#v5.3.0:
#           build: app

#   - wait

#   - label: "Debug and Run Hello Binary with Name"
#     command:
#       - docker-compose run --rm app $(buildkite-agent meta-data get NAME)
# How do use Docker Compose plugin?
# - label: "Run Hello Binary with Name"
#   plugins:
#     - docker-compose#v5.3.0:
#         run: app
#         command: [$(buildkite-agent meta-data get NAME)]

# echo "Docker password is set: $([[ -n "$(buildkite-agent meta-data get DOCKER_PASSWORD)" ]] && echo 'Yes' || echo 'No')"
# echo "All environment variables:"
# env | sort
# echo "Docker-related environment variables:"
# env | grep -i docker || echo "No Docker-related environment variables found"
# echo "Meta-data values:"
# buildkite-agent meta-data get DOCKER_USERNAME || echo "DOCKER_USERNAME not set in meta-data"
# [[ -n "$(buildkite-agent meta-data get DOCKER_PASSWORD)" ]] && echo "DOCKER_PASSWORD is set in meta-data" || echo "DOCKER_PASSWORD not set in meta-data"
# echo "Docker-related environment variables:"
# env | grep -i docker || echo "No Docker-related environment variables found"
