steps:
  - block: "Pause before entering name"
    prompt: "Please enter your name in the following input step."

  - input: "Enter your name"
    fields:
      - text: "Your name"
        key: "NAME"
        required: true

  - label: "Run Script"
    command: script.sh

  - wait: ~

  # - label: "Print EnvironmentVariables"
  #   command: |
  #     echo "--- :mag: Printing all environment variables"
  #     env | sort

  - label: "Docker Login and Run Command"
    plugins:
      - docker-login#v2.0.1:
          username: ${DOCKER_USERNAME}
          password-env: DOCKER_LOGIN_PASSWORD
    command: |
      echo "Docker login successful!"
      # Add your Docker commands here, for example:
      # docker pull your-image:tag
      # docker run your-image:tag

  # - label: "set agent  env"
  #   # command: ./run_build.sh
  #   plugins:
  #     - docker-login#v2.0.1:
  #         # username: DOCKER_USERNAME
  #         # password-env: DOCKER_LOGIN_PASSWORD
  #         username: ${DOCKER_USERNAME}
  #         password-env: DOCKER_LOGIN_PASSWORD

  # - label: "Debug Environment"
  #   command: |
  #     echo "Docker username: $(buildkite-agent meta-data get DOCKER_USERNAME)"
  #     echo "Docker password: $(buildkite-agent meta-data get DOCKER_PASSWORD)"
  #     env | sort

  # - label: "Docker Login"
  #   plugins:
  #     - docker-login#v2.0.1:
  #         username: { buildkite-agent meta-data get DOCKER_USERNAME }
  #         password-env: buildkite-agent meta-data get DOCKER_PASSWORD

  - wait: ~
  - label: "Verify Docker Login"
    command: |
      echo "Verifying Docker login..."
      docker info
      docker system info --format '{{.RegistryConfig.IndexConfigs}}'

  - label: "Build Docker Image"
    command: |
      docker-compose build app
      docker images

  # - label: "Debug Docker Push"
  #   command: |
  #     echo "Docker info:"
  #     docker info
  #     echo "Docker login check:"
  #     docker login -u "$DOCKER_USERNAME" --password-stdin <<< "$DOCKER_LOGIN_PASSWORD"
  #     echo "Manually tagging and pushing image:"
  #     docker tag app:${BUILDKITE_PROJECT_SLUG}:${BUILDKITE_BUILD_NUMBER}
  #     docker push ${BUILDKITE_PROJECT_SLUG}:${BUILDKITE_BUILD_NUMBER}
  # - label: ":docker: Build and Push Application"
  #   plugins:
  #     - docker-compose#v3.9.0:
  #         build: app
  #         image-repository: bredkrum/app-test-3
  #         push: app:${BUILDKITE_PROJECT_SLUG}:${BUILDKITE_BUILD_NUMBER}
  #         config:
  #           - DOCKER_AUTH_CONFIG:
  #               username: ${DOCKER_USERNAME}
  #               password: ${DOCKER_LOGIN_PASSWORD}
  # - label: ":docker: Build Application"
  #   plugins:
  #     - docker-compose#v3.9.0:
  #         build: app
  #         image-repository: bredkrum/app-test-3
  #         push: app:${BUILDKITE_PROJECT_SLUG}:${BUILDKITE_BUILD_NUMBER}
  # - label: ":package: Create Artifact"
  #   plugins:
  #     - docker-compose#v3.9.0:
  #         run: app
  #         image-repository: ${BUILDKITE_ORGANIZATION_SLUG}/${BUILDKITE_PIPELINE_SLUG}
  #         # image-repository: local
  #         command: ["sh", "-c", "cp /app/hello_binary /buildkite/artifacts/"]
  #   artifact_paths:
  #     - "buildkite/artifacts/hello_binary"
  - label: ":package: Create Artifact"
    plugins:
      - docker-compose#v3.9.0:
          run: app
          image-repository: ${BUILDKITE_ORGANIZATION_SLUG}/${BUILDKITE_PIPELINE_SLUG}
          # command: |
          #   mkdir -p /buildkite/artifacts/
          #   cp /app/hello_binary /buildkite/artifacts/
          command:
            [
              "mkdir",
              "-p",
              "/buildkite/artifacts/",
              "&&",
              "cp",
              "/app/hello_binary",
              "/buildkite/artifacts/",
              "&&",
              "ls",
              "-l",
              "/buildkite/artifacts/",
            ]
    artifact_paths:
      - "buildkite/artifacts/hello_binary"

    #   - label: ":docker: Build"
  #     plugins:
  #       - docker-compose#v5.3.0:
  #           build: app

  - label: ":arrow_up: Upload Artifact"
    command: |
      buildkite-agent artifact upload hello

  #   - label: ":docker: Build"
  #     plugins:
  #       - docker-compose#v5.3.0:
  #           build: app

  - wait

  - label: "Run Hello Binary with Name"
    command: |
      buildkite-agent artifact download hello .
      chmod +x hello
      ./hello $(buildkite-agent meta-data get NAME)

  - wait

  - label: "Debug NAME variable"
    command: |
      echo "All meta-data keys:"
      buildkite-agent meta-data keys
      echo "NAME from meta-data: $(buildkite-agent meta-data get NAME)"

# steps:
#   - block: "Pause before entering name"
#     prompt: "Please enter your name in the following input step."

#   - input: "Enter your name"
#     fields:
#       - text: "Your name"
#         key: "NAME"
#         required: true

#   - label: "Run Script"
#     command: script.sh

#   - wait: ~

#   - label: "Debug NAME variable"
#     command: |
#       echo "All meta-data keys:"
#       buildkite-agent meta-data keys
#       echo "NAME from meta-data: $(buildkite-agent meta-data get NAME)"

#   - label: ":docker: Build"
#     plugins:
#       - docker-compose#v5.3.0:
#           build: app

#   - wait

#   - label: "Debug and Run Hello Binary with Name"
#     command:
#       - docker-compose run --rm app $(buildkite-agent meta-data get NAME)
# How do use Docker Compose plugin?
# - label: "Run Hello Binary with Name"
#   plugins:
#     - docker-compose#v5.3.0:
#         run: app
#         command: [$(buildkite-agent meta-data get NAME)]

# echo "Docker password is set: $([[ -n "$(buildkite-agent meta-data get DOCKER_PASSWORD)" ]] && echo 'Yes' || echo 'No')"
# echo "All environment variables:"
# env | sort
# echo "Docker-related environment variables:"
# env | grep -i docker || echo "No Docker-related environment variables found"
# echo "Meta-data values:"
# buildkite-agent meta-data get DOCKER_USERNAME || echo "DOCKER_USERNAME not set in meta-data"
# [[ -n "$(buildkite-agent meta-data get DOCKER_PASSWORD)" ]] && echo "DOCKER_PASSWORD is set in meta-data" || echo "DOCKER_PASSWORD not set in meta-data"
# echo "Docker-related environment variables:"
# env | grep -i docker || echo "No Docker-related environment variables found"
